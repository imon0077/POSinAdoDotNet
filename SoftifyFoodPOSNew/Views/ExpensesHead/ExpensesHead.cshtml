@model  SoftifyFoodPOSNew.Models.ExpensesHead
@{
    ViewBag.Title = "Accounts Head";
}

<!-- js/css files -->
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>
<!-- /js/css files -->

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")
@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<!-- start:  Entry  page -->
<section class="panel" ng-app="app" ng-controller="MainCtrl">
    <form name="COAForm">
        <div class="panel-body">
            <div class="row">

                <div class="col-md-3" @*style="border-right: #cccccc 1px solid;"*@>
                    <div class="row">
                        <div class="col-md-12">

                            <div class="form-group mb-xs">
                                @Html.LabelFor(model => model.HeadName, " Name", htmlAttributes: new { @class = "control-label  text-bold"})
                                @Html.EditorFor(model => model.HeadName, new { htmlAttributes = new { @class = "form-control ", @Required = "required", ng_model = "frmData.HeadName" } })
                                @Html.ValidationMessageFor(model => model.HeadName, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-xs">
                                @Html.LabelFor(model => model.HeadType, "Type ", htmlAttributes: new { @class = "control-label text-bold" })
                                @Html.DropDownList("HeadType", new SelectList(ViewBag.Typelist, "Name", "Name"), "---Please Select---", new { @class = "form-control populate ", @Required = "required", ng_model = "frmData.HeadType", select2 = "", @style = "width:100%" })
                                @Html.ValidationMessageFor(model => model.HeadType, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-xs">
                                @Html.LabelFor(model => model.AccNo, "Account No", htmlAttributes: new { @class = "control-label text-bold" })
                                @Html.EditorFor(model => model.AccNo, new { htmlAttributes = new { @class = "form-control", @ng_required = "frmData.HeadType == 'Bank'", ng_model = "frmData.AccNo", ng_disabled = "frmData.HeadType != 'Bank'" } })
                                @Html.ValidationMessageFor(model => model.AccNo, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-xs">
                                @Html.LabelFor(model => model.Balance, "Balance", htmlAttributes: new { @class = "control-label text-bold" })
                                <input required="required" class="form-control" name="Balance" ng-model="frmData.Balance" type="number" step="any">
                            </div>


                        </div>

                        <div class="col-md-12 mt-lg">
                            <button class="btn btn-danger btn-block col-md-12" type="button" name="btnSubmit" ng-click="SaveData()" ng-disabled="COAForm.$invalid">
                                Submit <i class="fa fa-arrow-circle-right"></i>
                            </button>
                        </div>
                    </div>
                    <!-- : loading..... -->
                    <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                        <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
                    </div>
                </div>
                <div class="col-md-9 mt-md">
                    <div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                         style="font-family: 'Open Sans', Arial, sans-serif; color: #595959 !important;" class="grid"></div>
                </div>
            </div>
            </div>

</form>
</section>
<script>
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.autoFitColumns',
    'ui.grid.resizeColumns', 'ui.grid.selection', , 'ui.grid.exporter']);

    app.controller('MainCtrl', ['$scope', '$http', '$log', '$filter', '$interval', function ($scope, $http, $log, $filter, $interval) {

        $scope.frmData = {};
        $scope.frmData.Balance = 0;
        $scope.UpdateData = function (model) {
            console.log(model);
            $scope.frmData = angular.copy(model);
            // covert int to string for select2 select data
            $scope.frmData.CustType = $scope.frmData.CustType.toString();
            $scope.frmData.Area = $scope.frmData.Area.toString();
        };

        $scope.showLoader = false;

        $scope.gridOptions = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [0, 0, , 0, 0] },
            exporterPdfTableHeaderStyle: { fontSize: 8, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "List", style: 'headerStyle', fontSize: 14, bold: true },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { margin: [2, 2, 2, 2], alignment: 'center' };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: false, alignment: 'center' };
                return docDefinition;
            },
            exporterPdfOrientation: 'portrait',
            exporterPdfPageSize: 'LETTER',
            exporterPdfMaxGridWidth: 480,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true,
            // Default: End
            // Register : API [ for collapsable window ]
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $interval(function () {
                    $scope.gridApi.core.handleWindowResize();
                }, 500, 10);
            }
        }

        $scope.gridOptions.columnDefs = [
                    , { name: 'Name', field: 'HeadName', width: 200 }
                    , { name: 'Type', field: 'HeadType', width: 150 }
                    , { name: 'Balance', field: 'Balance', width: 120 }
                    , { name: 'Account No', field: 'AccNo', width: 150 }
                    , {
                        name: 'Action', width: 150, enableFiltering: false, cellTemplate:

                       '<a href="javascript:void(0)" class="ml-xs black" ng-click="grid.appScope.UpdateData(row.entity)"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>' +
                        '<a href="javascript:void(0)" class="ml-xs black ml-md"  ng-click="grid.appScope.DeleteItem(row.entity.HeadId)"><i class="fa fa-trash fa-lg" aria-hidden="true"></i></a>'
                    }
        ];

        /*   Load  : this area load date wise  */

        $scope.DataLoad = function () {
            $scope.showLoader = true;
            $http({
                method: 'Post',
                url: '../ExpensesHead/GetExpenseslist'
            }).then(function (data) {
                $scope.gridOptions.data = data.data;
                $scope.showLoader = false;
            });
        };

        $scope.DataLoad();
        /*   Load  : this area Save wise  */


        $scope.SaveData = function () {
            $http.post("../ExpensesHead/ExpensesHead", { model: $scope.frmData }).then(function (data) {
                if (data.data == 1) {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Saved Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.DataLoad();
                    $scope.frmData = {};
                } // Notification: Save Successfully
                else if (data.data != 1) {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Updated Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.DataLoad();
                    $scope.frmData = {};
                } // Notification: update Successfully
                else {
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });
                    $scope.DataLoad();
                    $scope.frmData = {};
                }
            },
            function (responseData) {

                console.log("Error !" + responseData);
            });
        };

        $scope.DeleteItem = function (HeadId) {
            if (confirm('Do you want to Delete  ?')) {
                var url = ""; var itemId = 0;
                if (HeadId > 0) { url = " @Url.Action("prcDeleteDataExpenses", "ExpensesHead")"; itemId = HeadId; }

                $http.post(url, { itemId }).then(function (data) {
                    if (data.data == 1) {
                        new PNotify({
                            title: 'Notification',
                            text: 'Data Deleted Successfully.',
                            type: 'custom',
                            addclass: 'notification-success',
                            icon: 'fa fa-check'
                        });
                        $scope.DataLoad();
                        $scope.frmData = {};

                    }
                    else {
                        new PNotify({
                            title: 'Notification',
                            text: '!! Failure : ' + data.data,
                            type: 'custom',
                            addclass: 'notification-danger',
                            icon: 'fa fa-exclamation-triangle'
                        });
                    }
                });
            }
        }
    }]);


    //---------------------- DatePicker Use --------------
    app.directive('datepicker', function ($filter) {
        return {
            restrict: 'A',
            require: 'ngModel',
            compile: function () {
                return {
                    pre: function (scope, element, attrs, ngModelCtrl) {
                        var format, dateObj;
                        format = (!attrs.dpFormat) ? 'dd-M-yyyy' : attrs.dpFormat;
                        if (!attrs.initDate && !attrs.dpFormat) {
                            dateObj = new Date();
                            scope[attrs.ngModel] = $filter("date")(dateObj, 'dd-MMM-yyyy');

                        } else if (!attrs.initDate) {
                            // Otherwise set as the init date
                            scope[attrs.ngModel] = attrs.initDate;
                        } else {
                        }
                        $(element).datepicker({
                            format: format,
                        }).on('changeDate', function (ev) {
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(ev.format(format));
                            });
                        });
                    }
                }
            }
        }
    });


    app.directive("select2", function ($timeout, $parse) {
        return {
            restrict: 'AC',
            require: 'ngModel',
            link: function (scope, element, attrs) {
                $timeout(function () {
                    element.select2();
                    element.select2Initialized = true;
                });

                var refreshSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.trigger('change');
                    });
                };

                var recreateSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.select2('destroy');
                        element.select2();
                    });
                };

                scope.$watch(attrs.ngModel, refreshSelect);

                if (attrs.ngOptions) {
                    var list = attrs.ngOptions.match(/ in ([^ ]*)/)[1];
                    // watch for option list change
                    scope.$watch(list, recreateSelect);
                }

                if (attrs.ngDisabled) {
                    scope.$watch(attrs.ngDisabled, refreshSelect);
                }
            }
        };
    });

    // NG-CONFIRM CLICK
    app.directive('ngConfirmClick', [
        function () {
            return {
                link: function (scope, element, attr) {
                    var msg = attr.ngConfirmClick || "Are you sure?";
                    var clickAction = attr.confirmedClick;
                    element.bind('click', function (event) {
                        if (window.confirm(msg)) {
                            scope.$eval(clickAction);
                        }
                    });
                }
            };
        }
    ]);

</script>


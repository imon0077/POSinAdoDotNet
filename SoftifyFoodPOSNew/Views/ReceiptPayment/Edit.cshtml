@using System.Data
@model  SoftifyFoodPOSNew.Models.ReceiptPayment
@{
    ViewBag.Title = "Collection / Payment List";
}
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<!-- start: Client Add Create page -->
<section class="panel" ng-app="ngGridApp" ng-controller="ngGridCtrl">
    <form name="frmProfileRecv">

        <div class="panel-body">
            <div class="row">
                    <div class="col-md-3 pr-none">

                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.RecvPayType, "Payment Type", htmlAttributes: new { @class = "control-label text-bold" })
                                <select ng-model="model.RecvPayType"
                                        select2=""
                                        required=""
                                 
                                        data-ng-options="d.PayType as d.PayType for d in PayTypeCombo"
                                        style="width: 100%" ng-change="GetJobBrand(model.RecvPayType)"
                                        class="form-control">
                                    <option value="">--Please Select--</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.dtRecv, "Receive Date", htmlAttributes: new { @class = "control-label text-bold" })
                                @Html.EditorFor(model => model.dtRecv, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "model.dtRecv", datepicker = "" } })
                                @Html.ValidationMessageFor(model => model.dtRecv, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-8">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Remarks, "Remarks", htmlAttributes: new { @class = "control-label text-bold" })
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @placeholder = "", @rows = 4, ng_model = "model.Remarks" })
                        </div>

                    </div>
                <!-- end : row-->

            </div>

            <hr style="margin-bottom:0px" />
            <div class="row">

                @*<div class="col-md-6">
                    <h3 class="pull-left">Profiles</h3>
                </div>*@
                @*<div class="col-md-6">
                    <button class="mb-xs mt-xs mr-xs mt-md btn btn-sm btn-primary pull-right" type="button" ng-click="addItem()">
                        Add <i class="fa fa-plus"></i>
                    </button>
                </div>*@
            </div> <!---Add Item -->

            <div class="row">
                <div class="col-md-12">
                    <div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns ui-grid-auto-resize
                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important; height: 35vh;" class="grid">
                    </div>
                </div>

            </div>    <!---Grid Option-->
        </div>
        <div style="color:red">
            <label><strong>Total Amount :</strong></label><b>{{GetTotal()|currency:" Tk ":2}}</b>
        </div>
         <footer class="panel-footer">
            <div class="row">
                <div class="col-sm-9 col-sm-offset-3">
                    <button class="btn btn-danger btn-wide" type="button" name="btnSubmit" ng-click="UpdateItem(model)">
                        Submit <i class="fa fa-arrow-circle-right"></i>
                    </button>

                    <a href="@Url.Action("Index","ReceiptPayment")" class="btn btn-default">
                        <i class="fa fa-arrow-circle-left"></i> Back to list

                    </a>

                    <span ng-if="hasDuplicate()==true">
                        <small style="color:red"> same item already exist</small>
                    </span>
                </div>
            </div>
        </footer>
    </form>
</section>


<script>


    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', '$interval', function ($scope, $http, $log, $filter, $timeout, $interval) {

        $scope.PayTypeCombo = [];
        $scope.BankCombo = [];
        $scope.ClientCombo = [];
        $scope.SupplierCombo = [];
        $scope.PaymodeCombo = [];
        $scope.CashCombo = [];

        $scope.model = { ReceiptPaymentSubList: [], dtRecv: $filter("date")(Date.now(), 'dd-MMM-yyyy') }

        $scope.getCombo = function () {
            // Product List
            $http({
                    method: 'POST',
                    url: '../GetComboLoad'
                }).
                then(function (result) {
                    $scope.PayTypeCombo = result.data.Table;
                    $scope.BankCombo = result.data.Table1;
                    $scope.ClientCombo = result.data.Table2;
                    $scope.SupplierCombo = result.data.Table3;
                    $scope.PaymodeCombo = result.data.Table4;
                    $scope.CashCombo = result.data.Table5;
                    console.log(result.data);
                });
        }
        $scope.getCombo();

        $scope.getEditdata = function () {
            // Product List
            $http({
                method: 'POST',
                url: '../GetEditdata'
            }).
                then(function (result) {
                    $scope.model = result.data.Table[0];
                    $scope.gridOptions.data = result.data.Table1;                    
                    console.log(result.data);
                });
        }
        $scope.getEditdata();


        $scope.GetDueAmount = function (rowentity) {
            if (rowentity.ClientId > 0) {
                $http({
                    method: 'Post',
                    url: '../GetDueAmount',
                    data: JSON.stringify({ ClientId: rowentity.ClientId })
                }).then(function (result) {
                    rowentity.DueAmount = result.data.Table[0].Due;
                    console.log(result.data)
                });
            }
        };

        $scope.GetSupplierDue = function (rowentity) {
            if (rowentity.SupplierId > 0) {
                $http({
                    method: 'Post',
                    url: '../GetSupDueAmount',
                    data: JSON.stringify({ SupplierId: rowentity.SupplierId })
                }).then(function (result) {
                    rowentity.DueAmount = result.data.Table[0].Due;
                    console.log(result.data)
                });
            }
        };




        //   1.:  grid api
        $scope.gridOptions = {
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $interval(function () {
                    $scope.gridApi.core.handleWindowResize();
                }, 200, 10);
            },
            data: []
        }
        $scope.GetJobBrand = function () {

            $scope.gridOptions.data = [];

            $scope.gridOptions.data = [
                {
                    PayMode: '',
                    ClientId: '',
                    SupplierId: '',
                    Bank: '',
                    Cash: '',

                    DueAmount: 0,
                    Amount: 0,
                    Discount: 0,


                    ChequeNo: '',
                    Remarks: ''
                }
            ];


        }
        $scope.GetTotal = function (RowEntity) {
            var Total = 0;
            for( i= 0; i<$scope.gridOptions.data.length; i++){
                Total = Total + $scope.gridOptions.data[i].Amount;
            }
            //console.log(Total);
            return Total;

        }
        //$scope.GetClintSuplier = function (RowEntity) {
        //    if (model.ReceiptPaymentSub.TranType == "Advance") {
        //        console.log($scope.gridOptions.data.TranType)
        //        return $scope.gridOptions.data.SupplierId;
        //    }
        //    else if (model.ReceiptPaymentSub.TranType == "Billpay") {
        //        console.log($scope.gridOptions.data.TranType)
        //        return $scope.gridOptions.data.ClientId;
        //    }
        //}
        //$scope.Getvisible = function (RowEntity) {

        //    console.log($scope.gridOptions.data.PayMode)
        //    return $scope.gridOptions.data.BankId;
        //}



        //$scope.hasDuplicate = function() {
        //    for (var i = 0; i < $scope.gridOptions.data.length; i++) {
        //        for (var x = i + 1; x < $scope.gridOptions.data.length; x++) {
        //            if ($scope.gridOptions.data[i].ProductId == $scope.gridOptions.data[x].ProductId &&
        //                $scope.gridOptions.data[i].ProductSubId == $scope.gridOptions.data[x].ProductSubId &&
        //                $scope.gridOptions.data[i].ColorId == $scope.gridOptions.data[x].ColorId) {
        //                return true;
        //            }
        //        }
        //    }
        //    return false;
        //};


        /// data push grid
        $scope.addItem = function () {
            $scope.gridOptions.data.push({
                PayMode: '',
                ClientId: '',
                Bank: '',
                Cash: '',

                DueAmount: 0,
                Amount: 0,
                Discount: 0,

                ChequeNo: '',
                Remarks: ''
            });
        };
        //$scope.addItem();

        //2.:  grid Column
        $scope.gridOptions.columnDefs = [
             {
                 name: 'Client/Suplier', width: 200, enableColumnMenu: false,
                 cellTemplate:
                     '<span ng-if="grid.appScope.model.RecvPayType==\'Payment\'">' +
                      ' <div>' +
                     ' <select class="form-control input-sm" ng-model="row.entity.SupplierId" style = "width:100%;"  required="" select2="" data-ng-options="d.SupplierId as d.SupplierName for d in grid.appScope.SupplierCombo" ng-change="grid.appScope.GetSupplierDue(row.entity)">' +
                     '<option value="">--- Please Select ---</option>' +
                     ' </select>'
                     +
                     ' </div>'
                 + '</span>'
                 + '<span ng-if="grid.appScope.model.RecvPayType==\'Collection\'">' +
                   ' <div>' +
                     ' <select class="form-control input-sm" ng-model="row.entity.ClientId" style = "width:100%;" required="" select2="" data-ng-options="d.ClientId as d.shortName for d in grid.appScope.ClientCombo" ng-change="grid.appScope.GetDueAmount(row.entity)">' +
                     '<option value="">--- Please Select ---</option>' +
                     ' </select>'
                     +
                     ' </div>'
                 + '</span>'

             },
             //ng-click="<a href="../ReceiptPayment/GetDueAmount/{{row.entity.ClientId}} ng-disabled="!row.entity.TranType""



           {
               name: 'Due Amount', width: 120, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                   ' <input type="number" step="any" disabled="" ng-model="row.entity.DueAmount"class="pl-sm"/>' +
                   ' </div>'
           },
           {
               name: 'Amount', width: 90, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                   ' <input required="" type="number" step="any" ng-model="row.entity.Amount" ng-change="grid.appScope.GetTotal(row.entity)" class="pl-sm" />' +
                   ' </div>'
           },
           {
               name: 'Discount', width: 90, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                   ' <input type="number" step="any" ng-model="row.entity.Discount" class="pl-sm" />' +
                   ' </div>'
           },
             {
                 name: 'Payment Mode', width: 140, enableColumnMenu: false,
                 cellTemplate: ' <div>' +
                     ' <select class="form-control input-sm" ng-model="row.entity.PayMode" style = "width:100%;" required="" select2="" data-ng-options="d.varName as d.varName for d in grid.appScope.PaymodeCombo">' +
                     '<option value="">--- Please Select ---</option>' +
                     ' </select>' +
                     ' </div>'
             },

             {
                 name: 'Account Name', width: 130, enableColumnMenu: false,
                 cellTemplate:
                     '<span ng-if="row.entity.PayMode==\'Bank\'">' +
                      ' <div>' +
                     ' <select class="form-control input-sm" ng-model="row.entity.HeadId" style = "width:100%;"  required="" select2="" data-ng-options="d.HeadId as d.HeadName for d in grid.appScope.BankCombo">' +
                     '<option value="">--- Please Select ---</option>' +
                     ' </select>'
                     +
                     ' </div>'
                 + '</span>'
                 + '<span ng-if="row.entity.PayMode==\'Cash\'">' +
                   ' <div>' +
                     ' <select class="form-control input-sm" ng-model="row.entity.HeadId" style = "width:100%;" required="" select2="" data-ng-options="d.HeadId as d.HeadName for d in grid.appScope.CashCombo">' +
                     '<option value="">--- Please Select ---</option>' +
                     ' </select>'
                     +
                     ' </div>'
                 + '</span>'

             },
           {
               name: 'ChequeNo', width: 120, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                   ' <input type="text" ng-model="row.entity.ChequeNo" ng-disabled = "row.entity.PayMode!=\'Bank\'" class="pl-sm" />' +
                   ' </div>'
           },
           {
               name: 'Cheque Date', width: 120, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                    ' <input type="datetime"  datepicker = "" ng-disabled = "row.entity.PayMode!=\'Bank\'" ng-model="row.entity.ChequeDate" class="pl-sm" />' +
                    ' </div>'
           },
           @*@Html.EditorFor(model => model.dtRecv, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "model.dtRecv", datepicker = "" } })*@
           {

               name: 'Remarks', width: 90, enableColumnMenu: false,
               cellTemplate: ' <div>' +
                   ' <input type="text" ng-model="row.entity.Remarks" class="pl-sm" />' +
                   ' </div>'
           },
           {
               name: ' ', enableColumnMenu: false, width: 40,
               cellTemplate:
                   '<a href="javascript:void(0)" class="ml-md black" ng-click="grid.appScope.removeItem(row)"><i class="fa fa-close fa-sm" aria-hidden="true"></i></a>'
           }
        ];
        /*   For Remove Item */
        $scope.removeItem = function (row) {
            var index = $scope.gridOptions.data.indexOf(row.entity);
            if (index == 0) {
            } else {
                $scope.gridOptions.data.splice(index, 1);
            }
        }

        $scope.UpdateItem = function (model) {
            $scope.model.ReceiptPaymentSubList = $scope.gridOptions.data;
            console.log(model);

            $http.post("@Url.Action("Edit", "ReceiptPayment")", { model: $scope.model }).then(function (data) {
                var res = data.data.match(/Successfully/g);
                console.log(res);
                if (res != null) {
                    new PNotify({
                        title: 'Notification',
                        text: data.data,
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    window.setTimeout(function () {
                        window.location.href = '../Index';
                    }, 2000);
                }

                else {
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });

                }
            });
        }



    }]);


    ngGridApp.directive("select2", function ($timeout, $parse) {
        return {
            restrict: 'AC',
            require: 'ngModel',
            link: function (scope, element, attrs) {
                $timeout(function () {
                    element.select2();
                    element.select2Initialized = true;
                });

                var refreshSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.trigger('change');
                    });
                };

                var recreateSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.select2('destroy');
                        element.select2();
                    });
                };

                scope.$watch(attrs.ngModel, refreshSelect);

                if (attrs.ngOptions) {
                    var list = attrs.ngOptions.match(/ in ([^ ]*)/)[1];
                    // watch for option list change
                    scope.$watch(list, recreateSelect);
                }

                if (attrs.ngDisabled) {
                    scope.$watch(attrs.ngDisabled, refreshSelect);
                }
            }
        };
    });

    // this datepicker also work chcnge event in angular js
    ngGridApp.directive('datepicker', function ($filter) {
        return {
            restrict: 'A',
            require: 'ngModel',
            compile: function () {
                return {
                    pre: function (scope, element, attrs, ngModelCtrl) {
                        var format, dateObj;
                        format = (!attrs.dpFormat) ? 'dd-M-yyyy' : attrs.dpFormat;
                        if (!attrs.initDate && !attrs.dpFormat) {
                            // If there is no initDate attribute than we will get todays date as the default
                            dateObj = new Date();

                            //scope[attrs.ngModel] = dateObj.getDate() + '/' + (dateObj.getMonth() + 1) + '/' + dateObj.getFullYear();
                            scope[attrs.ngModel] = $filter("date")(dateObj, 'dd-MMM-yyyy')

                        } else if (!attrs.initDate) {
                            // Otherwise set as the init date
                            scope[attrs.ngModel] = attrs.initDate;
                        } else {
                            // I could put some complex logic that changes the order of the date string I
                            // create from the dateObj based on the format, but I'll leave that for now
                            // Or I could switch case and limit the types of formats...
                        }
                        // Initialize the date-picker
                        $(element).datepicker({
                            format: format,
                        }).on('changeDate', function (ev) {
                            // To me this looks cleaner than adding $apply(); after everything.
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(ev.format(format));
                            });
                        });
                    }
                }
            }
        }
    });

    ngApp.directive('datetimez', function () {
        return {
            require: '?ngModel',
            restrict: 'A',
            link: function (scope, element, attrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function () {
                    element.val(ngModel.$viewValue || '');
                };

                function read() {
                    var value = element.val();
                    ngModel.$setViewValue(value);
                    //console.log(scope.dueDate);
                }

                var options = scope.$eval(attrs.datetimez) || { format: 'DD-MMM-YYYY hh:mm A', defaultDate: new Date(), sideBySide: true, };
                if (element.next().is('.input-group-addon')) {
                    var parentElm = $(element).parent();
                    parentElm.datetimepicker(options);

                    parentElm.on('dp.change', function () {
                        scope.$apply(read);
                    });
                } else {
                    element.datetimepicker(options);

                    element.on('dp.change', function () {
                        scope.$apply(read);
                    });
                }

                read();
            }
        };
    });

</script>

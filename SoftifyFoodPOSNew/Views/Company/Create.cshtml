@model SoftifyFoodPOSNew.Models.Company
@{
    ViewBag.Title = "New Company";
}
<link href="~/Content/assets/vendor/bootstrap-fileupload/bootstrap-fileupload.min.css" rel="stylesheet" />
<script src="~/Content/assets/vendor/bootstrap-fileupload/bootstrap-fileupload.min.js"></script>
<script src="~/Content/assets/ng-source/ng-vendor/ng-file-upload.min.js"></script>

<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<!-- start: Category Entry  page -->
<section ng-app="ngFileGridApp" ng-controller="ngFileGridCtrl">

    <form name="frmCompany" id="frmCompany">
        @Html.AntiForgeryToken()
         
        <section class="panel" style="background-color:white">
            <div class="panel-body">
                <div class="row">

                    <div class="col-md-10">

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comName, "Company Name", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comName, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comName", @required = "" } })
                            @Html.ValidationMessageFor(model => model.comName, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comAlias, "Comp. Name (Short)", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comAlias, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comAlias" } })
                            @Html.ValidationMessageFor(model => model.comAlias, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comFinYear, "Financial Year", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comFinYear, new { htmlAttributes = new { @class = "form-control", @type = "number", ng_model = "Company.comFinYear" } })
                            @Html.ValidationMessageFor(model => model.comFinYear, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comType, "Business Type", htmlAttributes: new { @class = "control-label" })
                            <select ng-model="Company.comType" class="form-control"
                                    ng-options="obj.Name as obj.Name for obj in CatCombo"
                                    required=""
                                    ng-required="!Company.ComName"
                                    style="width:100%">
                                <option value="">-- Choose Business Type --</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.comType, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comPhone, "Phone", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comPhone, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comPhone", @required = "" } })
                            @Html.ValidationMessageFor(model => model.comPhone, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comEmail, "Email", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comEmail, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comEmail" } })
                            @Html.ValidationMessageFor(model => model.comEmail, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comFax, "Fax", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comFax, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comFax" } })
                            @Html.ValidationMessageFor(model => model.comFax, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comWeb, "Web", htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.comWeb, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Company.comWeb" } })
                            @Html.ValidationMessageFor(model => model.comWeb, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.InvoicePrintSize, "Invoice Print Size", htmlAttributes: new { @class = "control-label" })
                            <select class="form-control" ng-model="Company.InvoicePrintSize">
                                <option id="1" value="A4">A4</option>
                                <option id="2" value="MiniSize">MiniSize</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.IsWarranty)
                        </div>

                        <div class="col-md-4 mt-lg">
                            @Html.LabelFor(model => model.IsSerial, "Is Serial", htmlAttributes: new { @class = "control-label" })
                            <span class="checkbox-custom checkbox-text-dark checkbox-default">
                                <input type="checkbox" id="IsSerial" name="IsSerial" />
                                <label for="IsSerial"></label>
                            </span>
                            @Html.ValidationMessageFor(model => model.IsSerial)

                            @Html.LabelFor(model => model.IsWarranty, "Is Warranty", htmlAttributes: new { @class = "control-label" })
                            <span class="checkbox-custom checkbox-text-dark checkbox-default">
                                <input type="checkbox" id="IsWarranty" name="IsWarranty" />
                                <label for="IsWarranty"></label>
                            </span>
                            @Html.ValidationMessageFor(model => model.IsWarranty)
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comAddress, "ComAddress 1", htmlAttributes: new { @class = "control-label" })
                            @Html.TextAreaFor(model => model.comAddress, new { @class = "form-control", ng_model = "Company.comAddress", @placeholder = "", @rows = 2, @required = "" })
                            @Html.ValidationMessageFor(model => model.comAddress, "", new { @class = "text-danger" })

                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.comAddress2, "ComAddress 2", htmlAttributes: new { @class = "control-label" })
                            @Html.TextAreaFor(model => model.comAddress2, new { @class = "form-control", ng_model = "Company.comAddress2", @placeholder = "", @rows = 2 })
                            @Html.ValidationMessageFor(model => model.comAddress2, "", new { @class = "text-danger" })

                        </div>

                    </div>

                    <div class="col-md-2">
                        <label class="control-label "> Photo</label>
                        <div class="fileupload fileupload-new" data-provides="fileupload">
                            <div class="fileupload-new thumbnail" style="width: 150px; height: 120px;">
                                <img src="~/Content/assets/images/no_image.png" class="rounded img-responsive" alt="No image">
                            </div>
                            <div class="fileupload-preview fileupload-exists thumbnail" style="max-width: 150px; max-height: 120px; line-height: 20px;"></div>
                            <input type="hidden">
                            <div class="input-append ml-xs">
                                <span class="btn btn-default btn-file btn-sm">
                                    <span class="fileupload-exists">Change</span>
                                    <span class="fileupload-new">Select photo</span>
                                    <input type="file" id="uploadPhoto" name="ImagePic" size="100" value=Server.MapPath("~/Content/assets/images/ItemImg") ngf-select="InsertItem($files)">
                                </span>
                                <a href="#" class="btn btn-default fileupload-exists btn-sm" data-dismiss="fileupload">Remove</a>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-12">
                        <button class="mb-xs mt-xs mr-xs mt-md btn btn-sm btn-primary pull-right" type="button" ng-click="addItem()">
                            Add <i class="fa fa-plus"></i>
                        </button>
                    </div>
                </div> <!---Add Item -->
                <!---Grid Option-->




            </div>
            <div class="row">
                <div class="col-md-12">
                    <div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns ui-grid-auto-resize
                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important; height: 30vh;width:60%" class="grid">
                    </div>
                </div>
            </div>

        </section>

        <footer class="panel-footer">
            <div class="row">
                <div class="col-sm-9 col-sm-offset-3">
                    <button class="btn btn-success btn-wide" type="button" name="btnSubmits" ng-disabled="frmCompany.$invalid" ng-click="InsertItem('Submit')">
                        Submit <i class="fa fa-arrow-circle-right"></i>
                    </button>
                    <a href="@Url.Action("Index", "Company")" class="btn btn-primary">
                        <i class="fa fa-arrow-circle-left"></i> Back to list
                    </a>
                </div>
            </div>
        </footer>


    </form>
</section>

<script>

    ngFileGridApp.controller('ngFileGridCtrl', ['$scope', 'Upload', '$http', '$log', '$filter', '$timeout', '$interval', function ($scope, Upload, $http, $log, $filter, $timeout, $interval) {
        $scope.CatCombo = [];
        $scope.TransType = [];
        $scope.Company = { files: [], InvoicePrintSize: 'A4', VarId: '', Type: '', COM: '', Year: '', Number: '' };

        $scope.data = [
      { VarId: '', Type: '', COM: '', Year: '', Number: '' }
        ];



        $scope.LoadCombo = function () {
            $http({
                method: 'Post',
                url: '../Company/GetComboLoad'
            }).then(function (result) {
                $scope.TransType = result.data.Table1;
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }
        $scope.LoadCombo();

        $scope.CatCombo = function () {
            $http({
                method: 'GET',
                url: '../Company/prcGetCombo/'
            }).
               then(function (data) {
                   $scope.CatCombo = data.data;
                   console.log(data.data);
               });
        }

        $scope.CatCombo(); // Page Load
        $scope.filedata = [];
        /   For Remove Item /
        $scope.removeItem = function (row) {
            var index = $scope.gridOptions.data.indexOf(row.entity);
            if (index == 0) {
            } else {
                $scope.gridOptions.data.splice(index, 1);
            }
        }

        $scope.gridOptions = {
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $interval(function () {
                    $scope.gridApi.core.handleWindowResize();
                }, 200, 10);
            },
            data: $scope.data
        }

        $scope.addItem = function () {
            $scope.gridOptions.data.push(
              { HeadId: '', Amount: '', Remarks: '' }
            );
        };


        $scope.NO = function (rowentity) {
            //console.log(rowentity);
            rowentity.No = (rowentity.Type + rowentity.COM +rowentity.Year +rowentity.Number);
        }


        $scope.gridOptions.columnDefs = [
                      {
                          name: 'Invoice Type', width: 180, enableColumnMenu: false,
                          cellTemplate: ' <div>' +
                              ' <select class="form-control input-sm" ng-model="row.entity.VarId" style = "width:100%;" required="" select2="" data-ng-options="d.VarId as d.varName for d in grid.appScope.TransType">' +
                              '<option value="">--- Please Select ---</option>' +
                              ' </select>' +
                              ' </div>'
                      },

                          {
                              // name: 'Type', width: 150, enableColumnMenu: false,
                              //cellTemplate:
                              //    '<span ng-if="row.entity.VarId==\'INV\'">' +
                              //     ' <div>' +' <span>INV</span>' +'</div>'
                              //   //'<div class="ml-sm" ng-if="row.entity.TruckStatus==\'Yellow\'">' +
                              //   //  '<span class="label label-warning">Yellow</span>' +
                              //   //'</div>'+
                              //   // '<div class="ml-sm" ng-if="row.entity.TruckStatus==\'Red\'">' +
                              //   //  '<span class="label label-danger">Red</span>' +
                              //   //'</div>'


                              name: 'Type', width: 150, enableColumnMenu: false, cellTemplate: ' <div>' +
                                ' <input type="text" required="" ng-model="row.entity.Type"class="pl-sm" ng-change="grid.appScope.NO(row.entity)" />' +
                            ' </div>'
                          },
                   {
                       name: 'COM', width: 120, enableColumnMenu: false,
                       cellTemplate: ' <div>' +
                        ' <input type="text" ng-model="row.entity.COM" class="pl-sm" ng-change="grid.appScope.NO(row.entity)" />' +
                        ' </div>'
                   },
                       {
                           name: 'Year', width: 120, enableColumnMenu: false,
                           cellTemplate: ' <div>' +
                            ' <input type="text" ng-model="row.entity.Year" class="pl-sm" ng-change="grid.appScope.NO(row.entity)" />' +
                            ' </div>'
                       },
                           {
                               name: 'Number', width: 120, enableColumnMenu: false,
                               cellTemplate: ' <div>' +
                                ' <input type="text" ng-model="row.entity.Number" class="pl-sm" ng-change="grid.appScope.NO(row.entity)" />' +
                                ' </div>'
                           },
                            {
                                name: 'No', width: 120, enableColumnMenu: false,
                                cellTemplate: ' <div>' +
                                       ' <input type="text" ng-model="row.entity.No" class="pl-sm" />' +
                                       ' </div>'
                            },
                            {
                                name: ' ', enableColumnMenu: false, width: 40,
                                cellTemplate:
                                    '<a href="javascript:void(0)" class="ml-md black" ng-click="grid.appScope.removeItem(row)"><i class="fa fa-close fa-sm" aria-hidden="true"></i></a>'
                            }
        ];





        $scope.InsertItem = function (filedata) {
            $scope.filedata.CompanySubList = $scope.gridOptions.data;
            console.log(filedata);
            if (filedata != 'Submit') {
                $scope.filedata = filedata
            } else {
                $scope.Company.files = $scope.filedata;
                Upload.upload({
                    url: '../Company/Create/',
                    data: {
                        model: $scope.Company
                    }
                }).then(function (response) {
                    if (response.data == "1") {
                        new PNotify({
                            title: 'Notification',
                            text: 'Data Saved Successfully.',
                            type: 'custom',
                            addclass: 'notification-success',
                            icon: 'fa fa-check'
                        });
                        $scope.Company = { files: [], InvoicePrintSize: 'A4' };
                        $('#frmCompany').trigger("reset");
                    }
                    else {
                        new PNotify({
                            title: 'Notification',
                            text: '!! Failure : ' + response.data,
                            type: 'custom',
                            addclass: 'notification-danger',
                            icon: 'fa fa-exclamation-triangle'
                        });

                    }
                })
            }

        }

    }]);

    ngApp.directive("select2", function ($timeout, $parse) {
        return {
            restrict: 'AC',
            require: 'ngModel',
            link: function (scope, element, attrs) {
                $timeout(function () {
                    element.select2();
                    element.select2Initialized = true;
                });

                var refreshSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.trigger('change');
                    });
                };

                var recreateSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.select2('destroy');
                        element.select2();
                    });
                };

                scope.$watch(attrs.ngModel, refreshSelect);

                if (attrs.ngOptions) {
                    var list = attrs.ngOptions.match(/ in ([^ ]*)/)[1];
                    // watch for option list change
                    scope.$watch(list, recreateSelect);
                }

                if (attrs.ngDisabled) {
                    scope.$watch(attrs.ngDisabled, refreshSelect);
                }
            }
        };
    });
</script>

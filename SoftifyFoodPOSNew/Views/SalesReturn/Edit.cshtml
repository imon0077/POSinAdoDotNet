@model SoftifyFoodPOSNew.Models.SalesReturn
@{
    ViewBag.Title = "Sales Return Edit";
}
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
<section class="panel" ng-app="ngGridApp" ng-controller="ngGridCtrl">
    @Html.AntiForgeryToken()
    <form name="DesChangeForm">

        <div class="panel-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-6">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ClientId, "Customer", htmlAttributes: new { @class = "control-label text-bold" })
                            <select ng-model="model.ClientId"
                                    select2=""
                                    required=""
                                    data-ng-options="d.ClientId as d.shortName for d in ClientList"
                                    style="width: 100%" 
                                    ng-change="GetClientCombo()"
                                    class="form-control">
                                <option value="">--Please Select--</option>
                            </select>
                        </div>

                        <div class="col-md-6">

                            @Html.LabelFor(model => model.InvoiceId, "Invoice", htmlAttributes: new { @class = "control-label text-bold" })
                            <select ng-model="model.InvoiceId"
                                    select2=""
                                    required=""
                                    data-ng-options="d.InvoiceId as d.InvoiceNo for d in InvoiceList"
                                    style="width: 100%" ng-change="DataLoad()"
                                    class="form-control">
                                <option value="">--Please Select--</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.ReturnType, "Reason", htmlAttributes: new { @class = "control-label text-bold" })
                            <select ng-model="model.ReturnType"
                                    select2=""
                                    required=""
                                    ng-init="model.ReturnType='Return'"
                                    data-ng-options="d.Reason as d.Reason for d in ReturnType"
                                    style="width: 100%"
                                    class="form-control">
                                @*<option value="">--Please Select--</option>*@
                            </select>
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.dtReturn, "Return Date", htmlAttributes: new { @class = "control-label text-bold" })
                            @Html.EditorFor(model => model.dtReturn, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "model.dtReturn", datepicker = "" } })
                            @Html.ValidationMessageFor(model => model.dtReturn, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Remarks, "Remarks", htmlAttributes: new { @class = "control-label text-bold" })
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @placeholder = "", @rows = 4, ng_model = "model.Remarks" })
                        </div>
                    </div>
                    <!-- end : row-->
                </div>
            </div>
        </div>

        <!-- end : row-->
        <div class="row">
            <div class="col-md-12">
                <div ui-grid="gridOptions" ui-grid-selection ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns ui-grid-auto-resize
                     style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important; height: 45vh;" class="grid">
                </div>

                <div class="col-md-4">
                    <div class="row">
                        <div class="col-md-12" readonly="" ng-model="Total">
                            <label style="font-weight:bold; color:black">Total Amount:</label><strong style="color:red">{{GetSum()|currency:" Tk ":2}}</strong>
                        </div>
                    </div>
                </div>
                @*<div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns ui-grid-auto-resize
                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important; height: 35vh;" class="grid">
                    </div>*@
            </div>
        </div>

        <!---Grid Option-->

        <footer class="panel-footer mt-md">
            <div class="row">
                <div class="col-sm-9 col-sm-offset-3">
                    <button class="btn btn-danger btn-wide" type="button" name="btnSubmit" ng-disabled="DesChangeForm.$invalid||dataForPost==false||validatecheck()==true" ng-click="InsertItem(model)">
                        Submit <i class="fa fa-arrow-circle-right"></i>
                    </button>

                    <a href="@Url.Action("Index","SalesReturn")" class="btn btn-default">
                        <i class="fa fa-arrow-circle-left"></i> Back to list
                    </a>
                    <strong><small style="color:red;">{{message}}</small></strong>
                    <span ng-if="hasDuplicate()==true">
                        <small style="color:red"> same item already exist</small>
                    </span>
                </div>
            </div>
        </footer>
    </form>
</section>


<script>

    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', '$rootScope', '$interval', 'modal', function ($scope, $http, $log, $filter, $timeout, $rootScope, $interval, modal) {



        $scope.ClientList = [];
        $scope.InvoiceList = [];
        $scope.InvoiceList = [];
        $scope.ClientId = 0;
        $scope.message = '';
        $scope.InvoiceId = 0;
        $scope.ReturnType = [];
        $rootScope.SerialList = [];
        var myModal = new modal();
        $rootScope.ProductId = 0;
        $scope.ProductList = [];
        $scope.dataForPost = [];
        $rootScope.dataForSerialPost = [];

        $scope.data = [
         { ProductName: '', Qty: '',PrevQty:'',ReturnQty:'', Rate: '', Amount: '',Type: '' }
        ];
        $scope.model = { GateSalesReturnSubList: $scope.dataForPost, GateSalesReturnSerial: [], ReturnSerialList: [], dtReturn: $filter("date")(Date.now(), 'dd-MMM-yyyy'), productId: '', Qty: '', Rate: '', Amount: '', Type: '' }



        $scope.GetEditdata = function () {
            $http({
                method: 'Post',
                url: '../GetEditdata'
            }).then(function (result) {
                console.log(result);
                $scope.model = result.data.Table[0];
                $scope.gridOptions.data = result.data.Table1;
                $rootScope.gridOptionsModal1.data = result.data.Table2;
                $timeout(function () {
                    for (var i = 0; i < $scope.gridOptions.data.length; i++) {
                        if ($scope.gridOptions.data[i].isCheck === 1) {
                            $scope.gridApi.selection.selectRow($scope.gridOptions.data[i]);
                        }
                    }
                });
                for (var i = 0; i < result.data.Table2.length; i++) {
                    result.data.Table2[i].IsSelect = Boolean(result.data.Table2[i].IsSelect);
                }
                $scope.LoadCombo();
                console.log(result);
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }
        $scope.GetEditdata();

        $scope.LoadCombo = function () {
            $http({
                method: 'Post',
                url: '../GetComboLoad'
            }).then(function (result) {
                $scope.ClientList = result.data.Table;
                $scope.ReturnType = result.data.Table1;
                $scope.TypeList = result.data.Table4;
                $scope.GetClientCombo();
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }

        //   1.:  grid api
        $scope.gridOptions = {
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $interval(function () {
                    $scope.gridApi.core.handleWindowResize();
                }, 200, 10);

                gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.countSelectRows = $scope.gridApi.selection.getSelectedRows().length;
                    $scope.dataForPost = $scope.gridApi.selection.getSelectedRows();
                    //console.log($scope.dataForPost);
                });

                gridApi.selection.on.rowSelectionChangedBatch($scope, function (row) {
                    $scope.countAllRows = $scope.gridApi.selection.getSelectedRows().length;
                    $scope.dataForPost = $scope.gridApi.selection.getSelectedRows();
                    console.log($scope.dataForPost);
                });
            },
            data: $scope.data
        }

        $scope.GetSum = function () {
            var total = 0;
            if ($scope.dataForPost.length > 0) {
                for (var i = 0; i < $scope.dataForPost.length; i++) {
                    total = total + $scope.dataForPost[i].ReturnQty * $scope.dataForPost[i].Rate;
                }
                $scope.model.Total = total;
            }

            return total;
        }

        /* START : Sub Total Calculation fncSubtotal */
        $scope.fncSubtotal = function (rowentity) {
            //console.log(rowentity);
            rowentity.Amount = rowentity.Qty * rowentity.Rate;
        }
        /* END : Sub Total Calculation fncSubtotal*/


        $scope.GetClientCombo = function () {
            console.log($scope.model.ClientId);
            $scope.showLoader = true;
            $http({
                method: 'Post',
                url: '../GetInvoiceCombo',
                data: JSON.stringify({ Id: $scope.model.ClientId })
            }).then(function (result) {
                $scope.InvoiceList = result.data.Table;
                $scope.showLoader = false;
            }, function (error) {
                console.log(error);
            });
        }

        $scope.DataLoad = function () {
            $scope.showLoader = true;
            $http({
                method: 'Post',
                url: '../GetClientComboLoad',
                data: JSON.stringify({ ClientId: $scope.model.ClientId, InvoiceId: $scope.model.InvoiceId })
            }).then(function (result) {
                $scope.gridOptions.data = result.data.Table;
                $rootScope.gridOptionsModal1.data = result.data.Table1;
                $scope.showLoader = false;
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }




        $scope.gridOptions.columnDefs = [
                          , { name: 'Name', field: 'ProductName', width: 230, enableColumnMenu: false }
                           , { name: 'Sold Qty', field: 'Qty', width: 120, enableColumnMenu: false }
                           , { name: 'Previous Qty', field: 'PrevQty', width: 120, enableColumnMenu: false }
                            , {
                                name: 'Return Qty', width: 120, enableColumnMenu: false,
                                cellTemplate:
                                    '<div ng-if="row.entity.IsSerial==true">' +
                                         '<strong class=""> ' + '<button type="button" class="" ng-disabled="row.isSelected===false" ng-model="row.entity.ReturnQty" ng-click="grid.appScope.showModal(row)" style="width:100%" >{{row.entity.ReturnQty}}</button>' +
                                    '</div>'+
                                  '<div ng-if="row.entity.IsSerial!=true">' +
                                        ' <input type="number" ng-change="grid.appScope.GetSum(row.entity)||grid.appScope.validatecheck()"  ng-model="row.entity.ReturnQty" ng-disabled="row.isSelected===false"  class="pl-sm"/>' +
                                  '</div>'
                            },
                            {
                                name: 'Rate', width: 100, enableColumnMenu: false,
                                cellTemplate:
                                    ' <div>' +
                                 ' <input type="number" ng-model="row.entity.Rate" ng-disabled="row.isSelected===false" ng-change="grid.appScope.fncSubtotal(row.entity)" class="pl-sm" ng-disabled=""/>' +
                                 ' </div>'
                            },
                           {
                               name: 'Type', width: 140, enableColumnMenu: false,
                               cellTemplate: ' <div>' +
                                   ' <select class="form-control input-sm" ng-model="row.entity.Type" style = "width:100%;" select2="" data-ng-options="d.varName as d.varName for d in grid.appScope.TypeList">' +
                                   '<option value="">--- Please Select ---</option>' +
                                   ' </select>' +
                                   ' </div>'
                           },
                         , { name: 'Amount', field: 'Amount', width: 120, enableColumnMenu: false }
        ];

        $rootScope.gridOptionsModal1 = {
            onRegisterApi: function (gridmodalApi) {
                $rootScope.gridmodalApi = gridmodalApi,
                    $interval(function () {
                        $rootScope.gridmodalApi.core.handleWindowResize();
                    }, 500, 10);
                $rootScope.gridmodalApi.grid.registerRowsProcessor($rootScope.modalFilterByRowId, 200);

            },

            data: [],
            enableFiltering: true,
            showGridFooter: true,
            enableSelectAll: false
        }

        $rootScope.SerialGenerate = function (row) {
            var check = 0; var count = 0;

            if (row.entity.IsSerial == true) {
                if ($rootScope.gridOptionsModal2.data.length == 0) {
                    for (var k = 0; k < $rootScope.gridOptionsModal1.data.length; k++) {  // Bin length
                        if ($rootScope.gridOptionsModal1.data[k].IsSerial == true) {
                            for (var l = 0; l < $rootScope.gridOptionsModal1.data[k].BinQty; l++) {  // total Qty
                                $rootScope.gridOptionsModal2.data.push({
                                    BinId: $rootScope.gridOptionsModal1.data[k].BinId,
                                    BinName: '',
                                    SerialNo: '',
                                    ProductId: $rootScope.gridOptionsModal1.data[k].ProductId
                                });
                            }
                        }
                    }
                }

                // SERIAL CHECK  =   0
                for (let index = 0; index < $rootScope.gridOptionsModal2.data.length; index++) {
                    $scope.ProductIdCheck = $rootScope.gridOptionsModal2.data[index].ProductId;
                    $scope.BinIdCheck = $rootScope.gridOptionsModal2.data[index].BinId;
                    if ($scope.ProductIdCheck == row.entity.ProductId && $scope.BinIdCheck == row.entity.BinId) {
                        count = count + 1
                    }
                }

                /* SERIAL GENERATE AUTO */
                if (row.entity.BinQty > 0 && $rootScope.gridOptionsModal2.data.length > 0) {
                    var realvalue = row.entity.BinQty - count;
                    if (realvalue > 0) {
                        for (let j = count; j < row.entity.BinQty; j++) {
                            $rootScope.gridOptionsModal2.data.push({
                                BinId: row.entity.BinId,
                                BinName: '',
                                SerialNo: '',
                                ProductId: row.entity.ProductId
                            });
                        }
                    }
                    else if (realvalue < 0) {
                        var del = count - row.entity.BinQty
                        for (var k = del - 1; k >= 0; k--) {
                            $rootScope.gridOptionsModal2.data.splice(k, 1);
                        }
                    }
                }
            } // End : Is Serial

        }
        /// Modal: Credit Amount
        $scope.showModal = function (row) {
            myModal.open(); // 1 = modal1
            $rootScope.modalHeader = "Procuct Serial";
            $rootScope.ProductId = row.entity.ProductId;


        }  //modal End




        $rootScope.gridOptionsModal1.columnDefs = [
           {
               name: 'Row',
               enableColumnMenu: false, visible: false,
               width: 200, cellTemplate: '<div>' + 'appscope{{grid.appScope.ProductId}}' + 'row.entity{{row.entity.ProductId}}' + '</div>'
           },

             {
                 name: ' ',
                 enableColumnMenu: false, enableFiltering: false,
                 width: 80, cellTemplate: '' +
                "<span class=\"checkbox-custom checkbox-text-dark checkbox-default ml-md mt-sm\" \">" +
                "<input  type=\"checkbox\" ng-model=\"row.entity.IsSelect\" id=\"{{row.entity.SerialId+'b'}}\" ng-click=\"$event.stopPropagation();getExternalScopes().showMe(row.entity.IsSelect); grid.appScope.addSerial(row.entity)\" >" +
                "<label for=\"{{row.entity.SerialId+'b'}}\" ></label>" +
                "</span>"
             },

         { name: 'SerialNo', field: 'SerialNo', width: 150, enableColumnMenu: false },
         { name: 'Validity', field: 'Validity', width: 300, enableColumnMenu: false },

        ];


        $rootScope.addSerial = function (rowEntity) {
            for (let i = 0; i < $scope.gridOptions.data.length; i++) {
                if ($scope.gridOptions.data[i].ProductId == rowEntity.ProductId) {
                    if (rowEntity.IsSelect != true) {
                        $scope.gridOptions.data[i].ReturnQty -= 1;
                    } else {
                        $scope.gridOptions.data[i].ReturnQty += 1;
                    }
                }
            }
        }

        $scope.ClearForm = function () {
            $scope.gridOptions.data = [];
            $scope.gridOptions.data = [{ ProductName: '', Qty: '', PrevQty: '', ReturnQty: '', Rate: '', Amount: '', Type: '' }]

            $scope.model = { GateSalesReturnSubList: $scope.dataForPost, GateSalesReturnSerial: [], ReturnSerialList: [], dtReturn: $filter("date")(Date.now(), 'dd-MMM-yyyy'), productId: '', Qty: '', Rate: '', Amount: '' }

        }


        $scope.InsertItem = function (model) {
            $scope.model.GateSalesReturnSubList = $scope.dataForPost;
            $scope.model.GateSalesReturnSerial = $rootScope.gridOptionsModal1.data;
            $http({
                method: 'POST',
                url: "@Url.Action("Edit", "SalesReturn")",
                data: { model: model }
        }).then(function (data) {
            if (data.data == "Successfully Updated.") {
                new PNotify({
                    title: 'Notification',
                    text: 'Data Updated Successfully.',
                    type: 'custom',
                    addclass: 'notification-success',
                    icon: 'fa fa-check'
                });

                $scope.model = [];
                window.setTimeout(function () {
                    window.location.href = '../Index';
                }, 2000);
            }

            else {
                new PNotify({
                    title: 'Notification',
                    text: '!! Failure : ' + data.data,
                    type: 'custom',
                    addclass: 'notification-danger',
                    icon: 'fa fa-exclamation-triangle'
                });
            }
        });
    }

        $scope.validatecheck = function () {
            var flag = false; $scope.message = '';
            angular.forEach($scope.gridOptions.data,
                function (item) {
                    if (item.Qty < item.ReturnQty) {
                        flag = true; $scope.message = 'Return Qty and Qty is not valid !! ';
                    }
                });
            return flag;
        }
        // START : Modal Filter By RowId
        $rootScope.modalFilterByRowId = function (renderableRows) {
            renderableRows.forEach(function (row) {
                var match = false;
                ['ProductId'].forEach(function (field) {
                    if (row.entity[field] == $rootScope.ProductId) {
                        match = true;
                    }
                });
                if (!match) {
                    row.visible = false;
                }
            });
            return renderableRows;
        };
        // END : Modal Filter By RowId
    }]);

    /* START : Modal Factory */
    ngGridApp.factory('modal', ['$compile', '$rootScope', function ($compile, $rootScope) {
        return function () {
            var elm;
            var modal = {
                open: function () {

                    var html = '' +
                        '<div class="modal" ng-style="modalStyle">{{modalStyle}}' +
                        '<div class="modal-dialog"><div class="modal-content">' +
                        '<div class="modal-header pt-xs pb-xs"><strong>{{modalHeader}}</strong></div>' +
                        '<div class="modal-body pt-xs pb-xs">' +
                        '<div id="grid1" ui-grid="gridOptionsModal1" class="gridmodal mt-xs"></div></div>' +
                        '<div class="modal-footer pt-xs pb-xs">' +
                        '<button id="buttonClose" class="btn btn-primary btn-sm" ng-click="close()">OK</button>' +
                        '</div></div></div></div>';
                    elm = angular.element(html);
                    angular.element(document.body).prepend(elm);

                    $rootScope.close = function () {
                        modal.close();
                    };
                    $rootScope.modalStyle = { "display": "block" };
                    $compile(elm)($rootScope);
                },
                close: function () {
                    if (elm) {
                        elm.remove();
                    }
                }
            };

            return modal;
        };
    }]);
    /* END : Modal Factory */
    ngGridApp.directive("select2", function ($timeout, $parse) {
        return {
            restrict: 'AC',
            require: 'ngModel',
            link: function (scope, element, attrs) {
                $timeout(function () {
                    element.select2();
                    element.select2Initialized = true;
                });

                var refreshSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.trigger('change');
                    });
                };

                var recreateSelect = function () {
                    if (!element.select2Initialized) return;
                    $timeout(function () {
                        element.select2('destroy');
                        element.select2();
                    });
                };

                scope.$watch(attrs.ngModel, refreshSelect);

                if (attrs.ngOptions) {
                    var list = attrs.ngOptions.match(/ in ([^ ]*)/)[1];
                    // watch for option list change
                    scope.$watch(list, recreateSelect);
                }

                if (attrs.ngDisabled) {
                    scope.$watch(attrs.ngDisabled, refreshSelect);
                }
            }
        };
    });

    // this datepicker also work chcnge event in angular js
    ngGridApp.directive('datepicker', function ($filter) {
        return {
            restrict: 'A',
            require: 'ngModel',
            compile: function () {
                return {
                    pre: function (scope, element, attrs, ngModelCtrl) {
                        var format, dateObj;
                        format = (!attrs.dpFormat) ? 'dd-M-yyyy' : attrs.dpFormat;
                        if (!attrs.initDate && !attrs.dpFormat) {
                            // If there is no initDate attribute than we will get todays date as the default
                            dateObj = new Date();

                            //scope[attrs.ngModel] = dateObj.getDate() + '/' + (dateObj.getMonth() + 1) + '/' + dateObj.getFullYear();
                            scope[attrs.ngModel] = $filter("date")(dateObj, 'dd-MMM-yyyy')

                        } else if (!attrs.initDate) {
                            // Otherwise set as the init date
                            scope[attrs.ngModel] = attrs.initDate;
                        } else {
                            // I could put some complex logic that changes the order of the date string I
                            // create from the dateObj based on the format, but I'll leave that for now
                            // Or I could switch case and limit the types of formats...
                        }
                        // Initialize the date-picker
                        $(element).datepicker({
                            format: format,
                        }).on('changeDate', function (ev) {
                            // To me this looks cleaner than adding $apply(); after everything.
                            scope.$apply(function () {
                                ngModelCtrl.$setViewValue(ev.format(format));
                            });
                        });
                    }
                }
            }
        }
    });

    ngApp.directive('datetimez', function () {
        return {
            require: '?ngModel',
            restrict: 'A',
            link: function (scope, element, attrs, ngModel) {
                if (!ngModel) return;

                ngModel.$render = function () {
                    element.val(ngModel.$viewValue || '');
                };

                function read() {
                    var value = element.val();
                    ngModel.$setViewValue(value);
                    //console.log(scope.dueDate);
                }

                var options = scope.$eval(attrs.datetimez) || { format: 'DD-MMM-YYYY hh:mm A', defaultDate: new Date(), sideBySide: true, };
                if (element.next().is('.input-group-addon')) {
                    var parentElm = $(element).parent();
                    parentElm.datetimepicker(options);

                    parentElm.on('dp.change', function () {
                        scope.$apply(read);
                    });
                } else {
                    element.datetimepicker(options);

                    element.on('dp.change', function () {
                        scope.$apply(read);
                    });
                }

                read();
            }
        };
    });

</script>
@using System.Data
@model SoftifyFoodPOSNew.Models.SalesReturn
@{
    ViewBag.Title = "Sales Return";
}
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<section class="panel" ng-app="ngGridApp" ng-controller="ngGridCtrl">
    @Html.AntiForgeryToken()
    <form name="DesChangeForm">

        <div class="panel-body">
            <div class="form-group mb-xs">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.InvoiceNo, "Invoice No", htmlAttributes: new { @class = "control-label text-bold" })
                    <div class="typeaheadcontainer">
                        <input type="text" name="DieNo"
                               class="typeaheadcontrol form-control"
                               ng-model="model.InvoiceNo"
                               uib-typeahead="InvoiceNo as InvoiceNo.InvoiceNo for InvoiceNo in SearchInvoice($viewValue)| limitTo:5"
                               placeholder="Search Invoice No"
                               typeahead-editable="false"
                               id="srchDie"
                               typeahead-on-select="GetInvoieData(row.entity, $item)" />
                    </div>
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.Reason, "Reason", htmlAttributes: new { @class = "control-label" })
                    <select ng-model="model.Reason"
                            select2=""
                            required=""
                            ng-init="model.Reason='Return'"
                            data-ng-options="d.Reason as d.Reason for d in ReasonList"
                            style="width: 100%"
                            class="form-control"></select>
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(model => model.dtReturn, "Return Date", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.dtReturn, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "model.dtReturn", datepicker = "" } })
                    @Html.ValidationMessageFor(model => model.dtReturn, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group mb-xs">
                <div class="col-md-4">
                    @Html.HiddenFor(model => model.ClientId, htmlAttributes: new { ng_model = "model.ClientId" })
                    @Html.LabelFor(model => model.ClientName, "Client Name", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control", ng_model = "model.ClientName", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.ClientAddress, "Address", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ClientAddress, new { htmlAttributes = new { @class = "form-control", ng_model = "model.ClientAddress", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.ClientAddress, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group mb-xs">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Remarks, "Remarks", htmlAttributes: new { @class = "control-label text-bold" })
                    @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @placeholder = "", @rows = 2, ng_model = "model.Remarks" })
                </div>

                <div class="col-md-2">
                    @Html.LabelFor(model => model.ReturnType, "Return Type", htmlAttributes: new { @class = "control-label" })
                    <select ng-model="model.ReturnType"
                            select2=""
                            required=""
                            data-ng-options="d.varName as d.varName for d in ReturnType"
                            style="width: 100%"
                            class="form-control"></select>
                </div>
            </div>

            <div class="form-group mb-xs">
                <div class="col-md-12">
                    <div ui-grid="gridOptions" ui-grid-selection ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns ui-grid-auto-resize
                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important; height: 45vh;" class="grid">
                    </div>

                    <div class="col-md-4">
                        <div class="row">
                            <div class="col-md-12" readonly="" ng-model="Total">
                                <label style="font-weight:bold; color:black">Total Amount:</label><strong style="color:red">{{GetSum()|currency:" Tk ":2}}</strong>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </div>


        <footer class="panel-footer mt-md">
            <div class="row">
                <div class="col-sm-9 col-sm-offset-3">
                    <button class="btn btn-danger btn-wide" type="button" name="btnSubmit" ng-disabled="DesChangeForm.$invalid||dataForPost==false||validatecheck()==true" ng-click="InsertItem(model)">
                        Submit <i class="fa fa-arrow-circle-right"></i>
                    </button>

                    <a href="@Url.Action("Index","SalesReturn")" class="btn btn-default">
                        <i class="fa fa-arrow-circle-left"></i> Back to list
                    </a>

                </div>
            </div>
        </footer>
    </form>
</section>


<script>

    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', '$interval', function ($scope, $http, $log, $filter, $timeout, $interval) {

        $scope.ReasonList = [];
        $scope.ReturnType = [];
        $scope.dataForPost = [];

        $scope.data = [
         { ProductName: '', Qty: '', PrevQty: '', ReturnQty: '', Rate: '', Amount: '' }
        ];
        $scope.model = { GateSalesReturnSubList: [], dtReturn: $filter("date")(Date.now(), 'dd-MMM-yyyy'), ReturnType: 'CashReturn' }

        $scope.LoadCombo = function () {
            $http({
                method: 'Post',
                url: '@Url.Action("GetComboLoad", "SalesReturn")'
            }).then(function (result) {
                $scope.ReasonList = result.data.Table;
                $scope.ReturnType = result.data.Table1;
            }, function (error) {
                console.log(error);
            });
        }
        $scope.LoadCombo();

        //   1.:  grid api
        $scope.gridOptions = {
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
                $interval(function () {
                    $scope.gridApi.core.handleWindowResize();
                }, 200, 10);

                gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.countSelectRows = $scope.gridApi.selection.getSelectedRows().length;
                    $scope.dataForPost = $scope.gridApi.selection.getSelectedRows();
                });

                gridApi.selection.on.rowSelectionChangedBatch($scope, function (row) {
                    $scope.countAllRows = $scope.gridApi.selection.getSelectedRows().length;
                    $scope.dataForPost = $scope.gridApi.selection.getSelectedRows();
                    //console.log($scope.dataForPost);
                });
            },
            data: $scope.data
        }

        $scope.GetSum = function () {
            var total = 0;
            if ($scope.dataForPost.length > 0) {
                for (var i = 0; i < $scope.dataForPost.length; i++) {
                    total = total + $scope.dataForPost[i].ReturnQty * $scope.dataForPost[i].Rate;
                }
                $scope.model.Total = total;
            }

            return total;
        }

        $scope.fncSubtotal = function (rowentity) {
            rowentity.Amount = rowentity.ReturnQty * rowentity.Rate;
        }
        /* END : Sub Total Calculation fncSubtotal*/

        //2.:  grid Column
        $scope.gridOptions.columnDefs = [
            { name: 'Name', field: 'ProductName', width: 300, enableColumnMenu: false },
            //{ name: 'Serial No', field: 'SerialNo', width: 130, enableColumnMenu: false },
            { name: 'Sold Qty', field: 'Qty', width: 90, enableColumnMenu: false },
            { name: 'Prev Qty', field: 'PrevQty', width: 90, enableColumnMenu: false },
            {
                name: 'Qty', width: 65, enableColumnMenu: false,
                cellTemplate:
                    ' <div> <input type="number" ng-model="row.entity.ReturnQty" ng-change= "grid.appScope.CalcAmount(row.entity)"  class="pl-sm" />' +
                    ' </div>'
            },
            {
                name: 'Rate', width: 75, enableColumnMenu: false,
                cellTemplate:
                    ' <div>' +
                    ' <input type="number" ng-model="row.entity.Rate" ng-disabled="row.isSelected===false" ng-change="grid.appScope.CalcAmount(row.entity)" class="pl-sm" ng-disabled=""/>' +
                    ' </div>'
            },
            { name: 'Amount', field: 'Amount', width: 110, enableColumnMenu: false }
        ];

        /* START : Item Amount Calculation */
        $scope.CalcAmount = function (rowEntity) {
            var rate = 0, amount = 0, qty = 0, Soldqty = 0;
            rate = rowEntity.Rate;
            Soldqty = rowEntity.Qty;
            qty = rowEntity.ReturnQty;
            if (qty > 0) {
                if (qty > Soldqty) {
                    alert("Sorry!! can't exceed sold quantity")
                    rowEntity.ReturnQty = Soldqty;
                    return true;
                } else {

                    amount = (rate * qty);
                    rowEntity.Amount = amount;
                }
            }
        }

        // Autocomplete load invoice
        $scope.SearchInvoice = function (param) {
            var output = [];
            if (angular.isDefined(param)) {
                if (param.length > 3) {
                    $scope.showLoader = true;

                    return $http({
                        method: 'POST',
                        url: '@Url.Action("GetAutocompleteData", "SalesReturn")',
                        data: JSON.stringify({ Flag: param })
                    }).then(function (response) {
                        $scope.showLoader = false;
                        $scope.ItemList = response.data;
                        return $scope.ItemList;

                    }, function errorCallback(response) {
                        console.log(response);
                    });
                    $scope.showLoader = false;
                }
            }
            else {
                //$scope.filterCountry = null;
            }
        }

        $scope.GetInvoieData = function (entity, selectedItem) {
            $scope.showLoader = false;
            $scope.model.InvoiceNo = selectedItem.InvoiceNo;
            $scope.model.InvoiceId = selectedItem.InvoiceId;
            $scope.model.ClientId = selectedItem.ClientId;
            $scope.model.ClientName = selectedItem.ClientName;
            $scope.model.ClientAddress = selectedItem.ClientAddress;
            
            if (angular.isDefined(selectedItem.InvoiceId)) {
                if (selectedItem.InvoiceId > 0) {
                    $http({
                        method: 'Post',
                        url: '@Url.Action("GetInvoiceData", "SalesReturn")',
                        data: JSON.stringify({ InvoiceId: selectedItem.InvoiceId })
                    }).
                    then(function (result) {
                        $scope.gridOptions.data = result.data;
                    });
                }
            }
        }

        $scope.ClearForm = function () {
            $scope.gridOptions.data = [];
            $scope.gridOptions.data = [{ ProductName: '', Qty: 0, PrevQty: 0, ReturnQty: 0, Rate: 0, Amount: 0}]
            $scope.model = { GateSalesReturnSubList: [], dtReturn: $filter("date")(Date.now(), 'dd-MMM-yyyy'), productId: '', Qty: 0, Rate: 0, Amount: 0 }
        }

        //Submit Form
        $scope.InsertItem = function () {
            $scope.model.GateSalesReturnSubList = $scope.dataForPost;

            $http.post("@Url.Action("Create", "SalesReturn")", { model: $scope.model }).then(function (data) {
                if (data.data == "1") {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data saved successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.ClearForm();
                }
                else {
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });

                }
            });
        }
    }]);


</script>
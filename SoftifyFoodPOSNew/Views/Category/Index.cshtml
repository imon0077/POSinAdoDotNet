
@using System.Data
@using Newtonsoft.Json
@using SoftifyFoodPOSNew.Models.Helpers
@model SoftifyFoodPOSNew.Models.Category
@{
    ViewBag.Title = "Category Entry ";
}

<header class="page-header">
    <h2>Category / Sub Category  </h2>
</header>

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<!-- start: Category Entry  page -->

@using (Html.BeginForm("Index", "Category", new { id = "POSCountrySave" }))
{

    @Html.AntiForgeryToken()
    <section class="panel">
        <div class="row" ng-app="ngGridApp" ng-controller="ngGridCtrl">
            <div class="col-md-12">
                <div class="tabs">
                    <ul class="nav nav-tabs tabs-primary">
                        <li class="active">
                            <a href="#Category" data-toggle="tab" ng-click="GetCategory()">Category Add/List</a>
                        </li>
                        <li>
                            <a href="#SubCategory" data-toggle="tab" ng-click="GetCategory()">Sub-Category Add/List</a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div id="Category" class="tab-pane active">

                            <div class="row">
                                <div class="col-md-3  mt-none ml-md">
                                    <div class="row">
                                        <div class="col-md-12">
                                            @Html.HiddenFor(model => model.PcatId, new { @class = "control-label ", ng_model = "Category.PcatId", ng_value = "Category.PcatId" })

                                            @Html.LabelFor(model => model.PcatId, "Category Id", htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.PcatId, new { htmlAttributes = new { @class = "form-control ", @placeholder = "", ng_model = "Category.PcatId", @readOnly = "" } })


                                            @Html.LabelFor(model => model.PcatName, "Category Name", htmlAttributes: new { @class = "control-label " })
                                            @Html.EditorFor(model => model.PcatName, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Category.PcatName", @Required = "required", ng_required = "!SubCategory.CatIds" } })
                                            @Html.ValidationMessageFor(model => model.PcatName, "", new { @class = "text-danger" })

                                        </div>


                                        <div class="col-md-12 mt-lg">
                                            <button class="btn btn-danger btn-wide" type="button" name="btnSubmits" ng-disabled="!Category.PcatName" ng-click="InsertItem(Category)">
                                                Submit <i class="fa fa-arrow-circle-right"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    <!-- : loading..... -->
                                    <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                                        <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
                                    </div>

                                    <div ui-grid="gridOptionsCat" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>

                                </div>
                            </div>

                        </div> <!-- Category tab End-->

                        <div id="SubCategory" class="tab-pane">

                            <div class="row">
                                <div class="col-md-3  mt-none">
                                    <div class="row">
                                        <div class="col-md-12">
                                            @Html.HiddenFor(model => model.SubCatId, new { @class = "control-label ", ng_value = "SubCategory.SubCatId" })
                                            @Html.HiddenFor(model => model.CatId, new { @class = "control-label ", ng_value = "SubCategory.CatIds" })

                                            <div class="form-group">
                                                <div class="col-md-12">

                                           @Html.LabelFor(model => model.CatId, "Product Category", htmlAttributes: new { @class = "control-label " })
                                                    <select ng-model="SubCategory.CatId"
                                                            ng-disabled="CatCombo.length == 0"
                                                            ng-options="obj.Id as obj.Name for obj in CatCombo"
                                                            select2=""
                                                            required=""
                                                            ng-required="!Category.PcatName"
                                                            style="width:200px;min-width:200px !important;max-width:200px !important;">
                                                        <option value="">-- Choose Category --</option>
                                                    </select>
                                                    @Html.ValidationMessageFor(model => model.CatId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.SubCatId, "Sub Category Id", htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.SubCatId, new { htmlAttributes = new { @class = "form-control ", @placeholder = "", ng_model = "SubCategory.SubCatId", @readOnly = "" } })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.SubCatName, "Sub Category Name", htmlAttributes: new { @class = "control-label " })
                                                    @Html.EditorFor(model => model.SubCatName, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "SubCategory.SubCatName", ng_required = "!Category.PcatName" } })
                                                    @Html.ValidationMessageFor(model => model.CatName, "", new { @class = "text-danger" })

                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-12 mt-md ml-md">
                                            <button class="btn btn-danger btn-wide" type="button" name="btnSubmits" ng-disabled="!SubCategory.SubCatName&& !SubCategory.CatIds" ng-click="InsertItem(SubCategory)">
                                                Submit <i class="fa fa-arrow-circle-right"></i>
                                            </button>

                                        </div>
                                    </div>

                                </div>
                                <!-- Start: SubCategory Start -->

                                <div class="col-md-8">
                                    <!-- : loading..... -->
                                    <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                                        <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
                                    </div>

                                    <div ui-grid="gridOptionsSubCat" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>
                                </div>

                                <!-- END: SubCategory End -->
                            </div>
                        </div>



                    </div><!-- Sub Category Tab End-->
                </div>
            </div>
        </div>
    </section>
}

<script>
    //var ngApp = angular.module("ngApp", []);

    //ngApp.controller("myCtrl", function ($scope, $http) {
    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', function ($scope, $http, $log, $filter, $timeout) {
        $scope.Category = {};
        $scope.SubCategory = {};
        $scope.CatCombo = [];

        $scope.updateCategory = function (model) {
            $scope.Category = angular.copy(model);
        };
        $scope.updateSubCategory = function (model) {
            $scope.SubCategory = angular.copy(model);
        };

        $scope.isRequired = function () {
            return !!($scope.SubCategory.CatIds || $scope.SubCategory.SubCatName);
        };

        $scope.SubCategoryData = [];
        $scope.CategoryData = [];


        $scope.gridOptionsCat = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [10, 10, 10, 10] },
            exporterPdfTableHeaderStyle: { fontSize: 7, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "Voucher List", style: 'headerStyle', fontSize: 9, bold: false },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { fontSize: 15, bold: true };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: true };
                return docDefinition;
            },
            exporterPdfOrientation: 'landscape',
            exporterPdfPageSize: 'legal',
            //exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true

        }

        $scope.gridOptionsSubCat = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [10, 10, 10, 10] },
            exporterPdfTableHeaderStyle: { fontSize: 7, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "Voucher List", style: 'headerStyle', fontSize: 9, bold: false },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { fontSize: 15, bold: true };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: true };
                return docDefinition;
            },
            exporterPdfOrientation: 'landscape',
            exporterPdfPageSize: 'legal',
            //exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true

        }

        $scope.gridOptionsCat.columnDefs = [
            , { name: 'Category', field: 'PcatName', width: 500 }
            , {
                name: 'Action', enableFiltering: false, width: 130,
                cellTemplate:
                    ' <div class="ml-sm">' +
                        ' <a href="javascript:void(0)"  ng-click="grid.appScope.updateCategory(row.entity)">' +
                        '                <i class="fa fa-edit fa-lg black mr-md ml-md" aria-hidden="true" title="Update Trip" data-placement="top" data-delay="500" data-toggle="tooltip"></i>' +
                        '          </a>' +

                        ' <a href="javascript:void(0)" class="text-danger black" ng-click="grid.appScope.DeleteItem(row.entity.PcatId,0)"><i class="fa fa-trash fa-lg" aria-hidden="true" title="delete item !!"></i></a>' +
                        '    </div>'
            }
        ];

        $scope.gridOptionsSubCat.columnDefs = [
            , { name: 'Category', field: 'ProdCatName', width: 250 }
            , { name: 'SubCategory', field: 'SubCatName', width: 250 }
            , {
                name: 'Action', enableFiltering: false, width: 130,
                cellTemplate:
                    ' <div class="ml-sm">' +

                        ' <a href="javascript:void(0)"  ng-click="grid.appScope.updateSubCategory(row.entity)">' +
                        '                <i class="fa fa-edit fa-lg black mr-md ml-md" aria-hidden="true" title="Update Trip" data-placement="top" data-delay="500" data-toggle="tooltip"></i>' +
                        '          </a>' +

                        ' <a href="javascript:void(0)" class="text-danger black" ng-click="grid.appScope.DeleteItem(0,row.entity.SubCatId)"><i class="fa fa-trash fa-lg" aria-hidden="true" title="delete item !!"></i></a>' +
                        '    </div>'
            }
        ];
        $scope.GetCategory = function () {
            /*  Get Sub Category */
            $http({
                method: 'Post',
                url: '../Category/GetCategoryData',
                data: JSON.stringify({ tempId: 0 })
            }).
                then(function (data) {
                    $scope.gridOptionsCat.data = data.data;
                });
            /*  Get Sub Category */
            $http({
                method: 'Post',
                url: '../Category/GetSubCategoryData',
                data: JSON.stringify({ tempId: 0 })
            }).
              then(function (data) {
                  $scope.gridOptionsSubCat.data = data.data;
              });

            $http({
                method: 'Post',
                url: '../Category/GetCategoryCombo/',
                data: JSON.stringify({ nullId: 0 })
            }).
               then(function (data) {
                   $scope.CatCombo = data.data;

               });
        }


        $scope.DeleteItem = function (CatId, SubCatId) {
            if (confirm('Do you want to Delete  ?')) {
                var url = ""; var itemId = 0;
                if (CatId > 0) { url = "prcDeleteDataCat/Category"; itemId = CatId; }
                else { url = "prcDeleteDataSubCat/Category"; itemId = SubCatId }

                $http.post(url, { itemId }).then(function (data) {
                    if (data.data == 1) {
                        new PNotify({
                            title: 'Notification',
                            text: 'Data Deleted Successfully.',
                            type: 'custom',
                            addclass: 'notification-success',
                            icon: 'fa fa-check'
                        });
                        $scope.GetCategory();
                        $scope.SubCategory = null;
                        $scope.Category = null;

                    }
                    else {
                        new PNotify({
                            title: 'Notification',
                            text: '!! Failure : ' + data.data,
                            type: 'custom',
                            addclass: 'notification-danger',
                            icon: 'fa fa-exclamation-triangle'
                        });
                    }
                });
            }

        }

        $scope.InsertItem = function (model) {
            $http.post("../Category/Index", { model }).then(function (data) {
                if (data.data == "1") {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Saved Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.GetCategory();
                    $scope.SubCategory = null;
                    $scope.Category = null;
                }
                else if (data.data == "2") {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Updated Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.GetCategory();
                    $scope.SubCategory = null;
                    $scope.Category = null;
                }

                else {
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });
                    $scope.GetCategory();
                    $scope.GetSubCategory();
                    $scope.GetCategoryCombo();
                    $scope.Category = null;
                    $scope.GetSubCategory = null;
                }
            });
        }

        $scope.GetCategory(); // Page Load




    }]);
</script>

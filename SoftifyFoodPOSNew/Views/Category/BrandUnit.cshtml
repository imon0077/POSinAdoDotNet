
@using System.Data
@using Newtonsoft.Json
@using SoftifyFoodPOSNew.Models.Helpers
@model SoftifyFoodPOSNew.Models.Category
@{
    ViewBag.Title = " Unit Brand Entry / List";
}

<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<!--Error messages will be shown here-->
@Html.Partial("_FlashMessage")

@Html.ValidationSummary(true, "", new { @class = "text-danger" })

<!-- start: Brand Entry  page -->

<section class="panel">
    <div class="row" ng-app="ngGridApp" ng-controller="ngGridCtrl">
        <div class="col-md-12">
            <div class="tabs">
                <ul class="nav nav-tabs tabs-primary">
                    <li class="active">
                        <a href="#Unit" data-toggle="tab">Unit Add/List</a>
                    </li>
                    <li>
                        <a href="#Brand" data-toggle="tab">Brand Add/List</a>
                    </li>

                </ul>
                <div class="tab-content">

                    <div id="Unit" class="tab-pane active">
                        <div class="row">
                            <div class="col-md-3  mt-none ml-md">
                                <div class="row">
                                    <div class="col-md-12">
                                        @Html.HiddenFor(model => model.UnitId, new { @class = "control-label ", ng_value = "Unit.UnitId" })


                                        @Html.LabelFor(model => model.UnitId, "UnitId", htmlAttributes: new { @class = "control-label " })
                                        @Html.EditorFor(model => model.UnitId, new { htmlAttributes = new { @class = "form-control ", @placeholder = "", ng_model = "Unit.UnitId", @readOnly = "" } })
                                        @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })

                                        @Html.LabelFor(model => model.UnitName, "Unit Name", htmlAttributes: new { @class = "control-label " })
                                        @Html.EditorFor(model => model.UnitName, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @Required = "required", ng_model = "Unit.UnitName", ng_required = "!Brand.BrandName" } })
                                        @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })

                                    </div>

                                    <div class="col-md-12 mt-lg">
                                        <button class="btn btn-danger btn-wide" type="button" name="btnSubmits" ng-disabled="!Unit.UnitName" ng-click="InsertItem(Unit)">
                                            Submit <i class="fa fa-arrow-circle-right"></i>
                                        </button>
                                    </div>
                                </div>

                            </div>
                            <!-- Start: Unit Start -->

                            <div class="col-md-8">
                                <!-- : loading..... -->
                                <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                                    <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
                                </div>
                                <div ng-if="gridOptionsUnit.data.length>0">
                                    <div ui-grid="gridOptionsUnit" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>
                                </div>
                            </div>

                            <!-- END: Unit End -->
                        </div>
                    </div>

                    <div id="Brand" class="tab-pane">

                        <div class="row">
                            <div class="col-md-3  mt-none ml-md">
                                <div class="row">
                                    <div class="col-md-12">

                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.BrandId, new { @class = "control-label ", ng_model = "Brand.BrandId", ng_value = "Brand.BrandId" })

                                            @Html.LabelFor(model => model.BrandId, "Brand Id", htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.BrandId, new { htmlAttributes = new { @class = "form-control ", @placeholder = "", ng_model = "Brand.BrandId", @readOnly = "" } })
                                        </div>

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BrandName, "Brand Name", htmlAttributes: new { @class = "control-label " })
                                            @Html.EditorFor(model => model.BrandName, new { htmlAttributes = new { @class = "form-control", @placeholder = "", ng_model = "Brand.BrandName", ng_required = "!Unit.UnitName" } })
                                            @Html.ValidationMessageFor(model => model.BrandName, "", new { @class = "text-danger" })
                                        </div>

                                    </div>

                                    <div class="col-md-12 mt-lg">
                                        <button class="btn btn-danger btn-wide" type="button" name="btnSubmits" ng-disabled="!Brand.BrandName" ng-click="InsertItem(Brand)">
                                            Submit <i class="fa fa-arrow-circle-right"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-8">
                                <!-- : loading..... -->
                                <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                                    <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
                                </div>
                               
                                <div ng-if="gridOptionsBrand.data.length>0">
                                    <div ui-grid="gridOptionsBrand" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                                         style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>
                                </div>
                            </div>
                        </div>

                    </div> <!-- Brand tab End-->





                </div><!-- Sub Brand Tab End-->
            </div>
        </div>
    </div>
</section>

<script>

    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', function ($scope, $http, $log, $filter, $timeout) {
        $scope.Brand = {};
        $scope.Unit = {};
        $scope.CatCombo = [];

        $scope.updateBrand = function (model) {
            $scope.Brand = angular.copy(model);
        };
        $scope.updateUnit = function (model) {
            $scope.Unit = angular.copy(model);
        };

        $scope.isRequired = function () {
            return !!($scope.Unit.CatIds || $scope.Unit.SubCatName);
        };

        $scope.UnitData = [];
        $scope.BrandData = [];

        $scope.gridOptionsBrand = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [10, 10, 10, 10] },
            exporterPdfTableHeaderStyle: { fontSize: 7, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "Brand List", style: 'headerStyle', fontSize: 9, bold: false },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { fontSize: 15, bold: true };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: true };
                return docDefinition;
            },
            exporterPdfOrientation: 'landscape',
            exporterPdfPageSize: 'legal',
            //exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true

        }

        $scope.gridOptionsUnit = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [10, 10, 10, 10] },
            exporterPdfTableHeaderStyle: { fontSize: 7, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "Unit List", style: 'headerStyle', fontSize: 9, bold: false },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { fontSize: 15, bold: true };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: true };
                return docDefinition;
            },
            exporterPdfOrientation: 'landscape',
            exporterPdfPageSize: 'legal',
            //exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true

        }

        $scope.gridOptionsBrand.columnDefs = [
            , { name: 'Brand', field: 'BrandName', width: 500 }
            , {
                name: 'Action', enableFiltering: false, width: 130,
                cellTemplate:
                    ' <div class="ml-sm">' +
                        ' <a href="javascript:void(0)"  ng-click="grid.appScope.updateBrand(row.entity)">' +
                        '                <i class="fa fa-edit fa-lg black mr-md ml-md" aria-hidden="true" title="Update Trip" data-placement="top" data-delay="500" data-toggle="tooltip"></i>' +
                        '          </a>' +

                        ' <a href="javascript:void(0)" class="text-danger black" ng-click="grid.appScope.DeleteItem(row.entity.BrandId,0)"><i class="fa fa-trash fa-lg" aria-hidden="true" title="delete item !!"></i></a>' +
                        '    </div>'
            }
        ];

        $scope.gridOptionsUnit.columnDefs = [
            , { name: 'Unit', field: 'UnitName', width: 500 }
            , {
                name: 'Action', enableFiltering: false, width: 130,
                cellTemplate:
                    ' <div class="ml-sm">' +

                        ' <a href="javascript:void(0)"  ng-click="grid.appScope.updateUnit(row.entity)">' +
                        '                <i class="fa fa-edit fa-lg black mr-md ml-md" aria-hidden="true" title="Update Trip" data-placement="top" data-delay="500" data-toggle="tooltip"></i>' +
                        '          </a>' +

                        ' <a href="javascript:void(0)" class="text-danger black" ng-click="grid.appScope.DeleteItem(0,row.entity.UnitId)"><i class="fa fa-trash fa-lg" aria-hidden="true" title="delete item !!"></i></a>' +
                        '    </div>'
            }
        ];
        $scope.GetBrandUnit = function () {
            /*  Get Sub Brand */
            $http({
                method: 'Get',
                url: '../Category/GetBrandData'
            }).
                then(function (data) {
                    $scope.gridOptionsBrand.data = data.data;
                });
            /*  Get Sub Brand */
            $http({
                method: 'Get',
                url: '../Category/GetUnitData'
            }).
                then(function (data) {
                    $scope.gridOptionsUnit.data = data.data;
                });
        }


        $scope.DeleteItem = function (BrandId, UnitId) {
            if (confirm('Do you want to Delete  ?')) {
                var url = ""; var itemId = 0;
                if (BrandId > 0) { url = "prcDeleteDataBrand/Category"; itemId = BrandId; }
                else { url = "prcDeleteDataUnit/Category"; itemId = UnitId }

                $http.post(url, { itemId }).then(function (data) {
                    if (data.data == 1) {
                        new PNotify({
                            title: 'Notification',
                            text: 'Data Deleted Successfully.',
                            type: 'custom',
                            addclass: 'notification-success',
                            icon: 'fa fa-check'
                        });
                        $scope.GetBrandUnit();
                        $scope.Unit = null;
                        $scope.Brand = null;

                    }
                    else {
                        new PNotify({
                            title: 'Notification',
                            text: '!! Failure : ' + data.data,
                            type: 'custom',
                            addclass: 'notification-danger',
                            icon: 'fa fa-exclamation-triangle'
                        });
                    }
                });
            }

        }

        $scope.InsertItem = function (model) {
            $http.post("../Category/BrandUnit", { model }).then(function (data) {
                if (data.data == "1") {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Saved Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.GetBrandUnit();
                    $scope.Unit = null;
                    $scope.Brand = null;
                }
                else if (data.data == "2") {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data Updated Successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.GetBrandUnit();
                    $scope.Unit = null;
                    $scope.Brand = null;
                }

                else {
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });
                    $scope.GetBrandUnit();
                    $scope.GetUnit();
                    $scope.Brand = null;
                    $scope.GetUnit = null;
                }
            });
        }

        $scope.GetBrandUnit(); // Page Load




    }]);
</script>

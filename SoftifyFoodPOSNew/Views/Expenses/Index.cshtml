@using System.Data
@model SoftifyFoodPOSNew.Models.Expenses
@{
    ViewBag.Title = " Expenses List ";
}
<!-- start:  List page -->
<header class="page-header">
    <h2>@ViewBag.Title</h2>
</header>

<section class="panel" ng-app="ngGridApp" ng-controller="ngGridCtrl">

    @using (Html.BeginForm())
    {
        <div class="panel-body">
            <header class="p-xs mr-lg">
                <div class="row mb-md">
                    <div class="col-md-12">
                        <div class="col-md-3">
                            @Html.Label("From Date", htmlAttributes: new { @class = "control-label text-bold" })
                            @Html.Editor("dtFrom", new { htmlAttributes = new { @class = "form-control", datepicker = "", ng_model = "dtFrom", @placeholder = "", @autocomplete = "off" } })
                        </div>

                        <div class="col-md-3">
                            @Html.Label("To Date", htmlAttributes: new { @class = "control-label text-bold" })
                            @Html.Editor("dtTo", new { htmlAttributes = new { @class = "form-control", @id = "date1", ng_model = "dtTo", @placeholder = "", datepicker = "", @autocomplete = "off" } })
                        </div>


                        <div class="col-sm-3 p-none mt-md pl-md pull-left">

                            <button type="button" class="mb-xs mt-xs mr-xs mt-sm btn  btn-info" value="Load" ng-click="DataLoad(dtFrom,dtTo)">
                                <i class="fa fa-refresh" aria-hidden="true"></i> Load List
                            </button>

                            <a href="@Url.Action("Create", "Expenses")" class="mb-xs mt-xs mr-xs mt-sm btn  btn-danger ">
                                <i class="fa fa-plus" aria-hidden="true"></i> Add New
                            </a>
                        </div>


                    </div>
                </div>
                <hr class="mb-none mt-none" />
            </header>



            <!-- end: page -->
            <!-- : loading..... -->
            <div ng-show="showLoader" class="loading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; z-index: 30001;">
                <img src="~/Content/assets/images/loadinghr.gif" alt="loading" style="position: absolute; top: 45%; left: 45%; width: 8%;">
            </div>

            <div ui-grid="gridOptions" ui-grid-exporter ui-grid-auto-fit-columns ui-grid-resize-columns
                 style="font-family: 'Open Sans', Arial, sans-serif; color: #252222 !important;" class="grid"></div>
        </div>
    }
</section>




<script type="text/javascript">

    ngGridApp.controller('ngGridCtrl', ['$scope', '$http', '$log', '$filter', '$timeout', '$interval', '$rootScope', function ($scope, $http, $log, $filter) {
        $scope.showLoader = false;
        $scope.dtFrom = $filter("date")(Date.now(), 'dd-MMM-yyyy');
        $scope.dtTo = $filter("date")(Date.now(), 'dd-MMM-yyyy');
        $scope.model = {};
        $scope.IsMaster = '';
        $scope.gridOptions = {
            // EXPORT : START
            enableGridMenu: true,
            enableSelectAll: true,
            enableColumnMenus: false,
            enableAutoFitColumns: false,
            exporterCsvFilename: 'myFile.csv',
            exporterPdfDefaultStyle: { fontSize: 7 },
            exporterPdfTableStyle: { margin: [05, 05, , 05] },
            exporterPdfTableHeaderStyle: { fontSize: 8, bold: true, italics: false, color: 'black' },
            exporterPdfHeader: { text: "PO List", style: 'headerStyle', fontSize: 14, bold: true },
            exporterPdfFooter: function (currentPage, pageCount) {
                return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
            },
            exporterPdfCustomFormatter: function (docDefinition) {
                docDefinition.styles.headerStyle = { margin: [20, 20, 20, 20], alignment: 'center' };
                docDefinition.styles.footerStyle = { fontSize: 8, bold: false, alignment: 'center' };
                return docDefinition;
            },
            exporterPdfOrientation: 'portrait',
            exporterPdfPageSize: 'LETTER',
            exporterPdfMaxGridWidth: 500,
            exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
            exporterExcelFilename: 'myFile.xlsx',
            exporterExcelSheetName: 'Sheet1',
            // EXPORT : END
            enableFiltering: true,
            showGridFooter: true,
            // Default: End
            onRegisterApi: function (gridApi) {
                $scope.gridApi = gridApi;
            }
        }

        $scope.gridOptions.columnDefs = [
            { name: 'Expense Date', field: 'dtExp', width: 120 },
            { name: 'Exp. No', field: 'ExpNo', width: 120 },
            { name: 'Type', field: 'ExpType', width: 100 },
            { name: 'Payment Source', field: 'HeadName', width: 150 },
            { name: 'Cheque No', field: 'ChequeNo', width: 150 },
            { name: 'Cheque Date', field: 'ChequeDate', width: 120 },
            { name: 'Amount', field: 'Total', width: 110 },   
            {
                name: 'Action', width: 100, enableFiltering: false, cellTemplate:
                      "<span ng-if=row.entity.IsAllowEdit==1>"+        
                    '<a href="../Expenses/Edit/{{row.entity.ExpId}}" class="ml-xs mr-md black" ng-click="grid.appScope.UpdateData(row.entity)"><i class="fa fa-pencil fa-lg" aria-hidden="true"></i></a>' +
                       '<a href="javascript:void(0)" class="black ml-md" ng-confirm-click="Are you sure to delete this record ?" confirmed-click="grid.appScope.DeleteItem(row.entity.ExpId)"><i class="fa fa-trash fa-lg text-danger" aria-hidden="true"></i></a>'+
                       "</span>"
            }

        ];


        /*   Load  : this area load date wise  */
        $scope.DataLoad = function (dtFrom, dtTo) {
            $scope.showLoader = true;
            $http({
                method: 'Post',
                url: '@Url.Action("GetExpensesList", "Expenses")',
                data: JSON.stringify({ dtFrom: $scope.dtFrom, dtTo: $scope.dtTo })
            }).then(function (data) {
                $scope.gridOptions.data = data.data;
                $scope.showLoader = false;
            }, function (error) {
                alert(error);
                console.log(error);
            });
        }
        $scope.DataLoad($scope.dtFrom, $scope.dtTo);

        $scope.DeleteItem = function (ExpId) {
            $scope.showLoader = true;
            $http.post("prcDeleteData/Expenses", { ItemId: ExpId }).then(function (data) {
                if (data.data == '1') {
                    new PNotify({
                        title: 'Notification',
                        text: 'Data deleted successfully.',
                        type: 'custom',
                        addclass: 'notification-success',
                        icon: 'fa fa-check'
                    });
                    $scope.showLoader = false;
                    $scope.DataLoad($scope.dtFrom, $scope.dtTo);

                }
                else {
                    $scope.showLoader = false;
                    new PNotify({
                        title: 'Notification',
                        text: '!! Failure : ' + data.data,
                        type: 'custom',
                        addclass: 'notification-danger',
                        icon: 'fa fa-exclamation-triangle'
                    });
                    $scope.DataLoad($scope.dtFrom, $scope.dtTo);

                }
            });
        }

    }]);

</script>
